require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LocationsController, type: :controller do

  before do
    @user = User.create!({email: "me@gmail.com", password: "123456", password_confirmation: "123456"})
    sign_in @user
  end

  let :truck do
    Truck.create(name: "Mike's Truck", user_id: @user.id)
  end

  # This should return the minimal set of attributes required to create a valid
  # Location. As you add validations to Location, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { truck_id: truck.id, longitude: 2.5, latitude: 2.6}
  }

  let(:invalid_attributes) {
    { truck_id: "", longitude: "", latitude: ""}
  }

  describe "GET #index" do
    it "assigns all locations as @locations" do
      location = Location.create! valid_attributes
      get :index, {}
      expect(assigns(:locations)).to eq([location])
    end
  end

  describe "GET #show" do
    it "assigns the requested location as @location" do
      location = Location.create! valid_attributes
      get :show, {:id => location.to_param}
      expect(assigns(:location)).to eq(location)
    end
  end

  describe "GET #new" do
    it "assigns a new location as @location" do
      get :new, valid_attributes
      expect(assigns(:location)).to be_a_new(Location)
    end
  end

  describe "GET #edit" do
    it "assigns the requested location as @location" do
      location = Location.create! valid_attributes
      get :edit, {:id => location.to_param}
      expect(assigns(:location)).to eq(location)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Location" do
        expect {
          post :create, {:location => valid_attributes}
        }.to change(Location, :count).by(1)
      end

      it "assigns a newly created location as @location" do
        post :create, {:location => valid_attributes}
        expect(assigns(:location)).to be_a(Location)
        expect(assigns(:location)).to be_persisted
      end

      it "assigns a truck_id to location" do
        post :create, {:location => valid_attributes}
        expect(assigns(:location).truck_id).to eq(truck.id)
      end

      it "only allows authorized user of truck to create location" do
        @truck = Truck.create( id: 2, name: "Tacos", user_id: @user.id )
        post :create, {:location => { truck_id: 2, longitude: 3, latitude: 3 } }
        expect(assigns(:location).truck_id).to eq (@truck.id)
      end

      it "redirects to the created location" do
        @truck = Truck.create( id: 2, name: "Tacos", user_id: @user.id )
        post :create, {:location => { truck_id: 2, longitude: 3, latitude: 3 }}
        expect(response).to redirect_to(truck_path(@truck.id))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved location as @location" do
        post :create, {:location => invalid_attributes}
        expect(assigns(:location)).to be_a_new(Location)
      end

      it "re-renders the 'new' template" do
        post :create, {:location => invalid_attributes}
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { truck_id: 3, longitude: 44.5, latitude: 33.3}
      }

      it "updates the requested location" do
        location = Location.create! valid_attributes
        put :update, {:id => location.to_param, :location => new_attributes}
        location.reload
        expect(location.latitude).to eq(33.3)
      end

      it "assigns the requested location as @location" do
        location = Location.create! valid_attributes
        put :update, {:id => location.to_param, :location => valid_attributes}
        expect(assigns(:location)).to eq(location)
      end

      it "redirects to the location" do
        location = Location.create! valid_attributes
        put :update, {:id => location.to_param, :location => valid_attributes}
        expect(response).to redirect_to(location)
      end
    end

    context "with invalid params" do
      it "assigns the location as @location" do
        location = Location.create! valid_attributes
        put :update, {:id => location.to_param, :location => invalid_attributes}
        expect(assigns(:location)).to eq(location)
      end

      it "re-renders the 'edit' template" do
        location = Location.create! valid_attributes
        put :update, {:id => location.to_param, :location => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested location" do
      location = Location.create! valid_attributes
      expect {
        delete :destroy, {:id => location.to_param}
      }.to change(Location, :count).by(-1)
    end

    it "redirects to the locations list" do
      location = Location.create! valid_attributes
      delete :destroy, {:id => location.to_param}
      expect(response).to redirect_to(locations_url)
    end
  end

end
