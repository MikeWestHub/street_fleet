require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TrucksController, type: :controller do

  before do
    @user = User.create!({email: "me@gmail.com", password: "123456", password_confirmation: "123456"})
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Truck. As you add validations to Truck, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Big Bobs Bigole truck", user_id: @user.id }
  }

  let(:invalid_attributes) {
    { name: "" }
  }

  describe "GET #index" do
    it "assigns all trucks as @trucks" do
      truck = Truck.create! valid_attributes
      get :index, {}
      expect(assigns(:trucks)).to eq([truck])
    end
  end

  describe "GET #show" do
    it "assigns the requested truck as @truck" do
      truck = Truck.create! valid_attributes
      get :show, {:id => truck.to_param}
      expect(assigns(:truck)).to eq(truck)
    end
  end

  describe "GET #new" do
    it "assigns a new truck as @truck" do
      get :new, {}
      expect(assigns(:truck)).to be_a_new(Truck)
    end
  end

  describe "GET #edit" do
    it "assigns the requested truck as @truck" do
      truck = Truck.create! valid_attributes
      get :edit, {:id => truck.to_param}
      expect(assigns(:truck)).to eq(truck)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Truck" do
        expect {
          post :create, {:truck => valid_attributes}
        }.to change(Truck, :count).by(1)
      end

      it "assigns a newly created truck as @truck" do
        post :create, {:truck => valid_attributes}
        expect(assigns(:truck)).to be_a(Truck)
        expect(assigns(:truck)).to be_persisted
      end

      it "redirects to the created truck" do
        post :create, {:truck => valid_attributes}
        expect(response).to redirect_to(Truck.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved truck as @truck" do
        post :create, {:truck => invalid_attributes}
        expect(assigns(:truck)).to be_a_new(Truck)
      end

      it "re-renders the 'new' template" do
        post :create, {:truck => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { name: "Tacos", website: "www.tacos.com"}
      }

      it "updates the requested truck" do
        truck = Truck.create! valid_attributes
        put :update, {:id => truck.to_param, :truck => new_attributes}
        truck.reload
        expect(truck.name).to eq("Tacos")
      end

      it "assigns the requested truck as @truck" do
        truck = Truck.create! valid_attributes
        put :update, {:id => truck.to_param, :truck => valid_attributes}
        expect(assigns(:truck)).to eq(truck)
      end

      it "redirects to the truck" do
        truck = Truck.create! valid_attributes
        put :update, {:id => truck.to_param, :truck => valid_attributes}
        expect(response).to redirect_to(truck)
      end
    end

    context "with invalid params" do
      it "assigns the truck as @truck" do
        truck = Truck.create! valid_attributes
        put :update, {:id => truck.to_param, :truck => invalid_attributes}
        expect(assigns(:truck)).to eq(truck)
      end

      it "re-renders the 'edit' template" do
        truck = Truck.create! valid_attributes
        put :update, {:id => truck.to_param, :truck => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested truck" do
      truck = Truck.create! valid_attributes
      expect {
        delete :destroy, {:id => truck.to_param}
      }.to change(Truck, :count).by(-1)
    end

    it "redirects to the trucks list" do
      truck = Truck.create! valid_attributes
      delete :destroy, {:id => truck.to_param}
      expect(response).to redirect_to(trucks_url)
    end
  end

end
